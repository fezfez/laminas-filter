<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.15.0@5c774aca4746caf3d239d9c8cadb9f882ca29352">
  <file src="src/AbstractDateDropdown.php">
    <MissingReturnType>
      <code>filterable</code>
    </MissingReturnType>
    <MixedArgumentTypeCoercion>
      <code>$value</code>
    </MixedArgumentTypeCoercion>
    <PossiblyUnusedMethod>
      <code>setNullOnAllEmpty</code>
      <code>setNullOnEmpty</code>
    </PossiblyUnusedMethod>
    <PropertyNotSetInConstructor>
      <code>$expectedInputs</code>
    </PropertyNotSetInConstructor>
    <RedundantCondition>
      <code><![CDATA[array_reduce($value, self::class . '::reduce', true)]]></code>
    </RedundantCondition>
    <TypeDoesNotContainType>
      <code><![CDATA[array_reduce($value, self::class . '::reduce', false)]]></code>
    </TypeDoesNotContainType>
  </file>
  <file src="src/AbstractFilter.php">
    <DocblockTypeContradiction>
      <code>gettype($options)</code>
    </DocblockTypeContradiction>
    <InvalidPropertyAssignmentValue>
      <code>[]</code>
    </InvalidPropertyAssignmentValue>
    <MixedAssignment>
      <code>$value</code>
    </MixedAssignment>
    <PossiblyInvalidPropertyAssignmentValue>
      <code><![CDATA[$this->options]]></code>
    </PossiblyInvalidPropertyAssignmentValue>
    <RedundantConditionGivenDocblockType>
      <code>is_object($options)</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/AbstractUnicode.php">
    <RedundantCondition>
      <code>assert(is_string($encoding))</code>
      <code>is_string($encoding)</code>
    </RedundantCondition>
    <RedundantConditionGivenDocblockType>
      <code>is_string($encoding)</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/AllowList.php">
    <PossiblyUnusedMethod>
      <code>setList</code>
      <code>setStrict</code>
    </PossiblyUnusedMethod>
    <RedundantCastGivenDocblockType>
      <code>(bool) $strict</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/Blacklist.php">
    <InvalidExtendClass>
      <code>DenyList</code>
    </InvalidExtendClass>
  </file>
  <file src="src/Boolean.php">
    <ArgumentTypeCoercion>
      <code>$typeOrOptions</code>
    </ArgumentTypeCoercion>
    <DocblockTypeContradiction>
      <code><![CDATA[! is_array($translations) && ! $translations instanceof Traversable]]></code>
    </DocblockTypeContradiction>
    <MixedArrayOffset>
      <code><![CDATA[$this->options['translations'][$message]]]></code>
    </MixedArrayOffset>
    <MixedAssignment>
      <code>$flag</code>
      <code>$message</code>
    </MixedAssignment>
    <MoreSpecificImplementedParamType>
      <code>$value</code>
    </MoreSpecificImplementedParamType>
    <PossiblyNullArgument>
      <code>$type</code>
    </PossiblyNullArgument>
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$this->options['casting']]]></code>
      <code><![CDATA[$this->options['translations']]]></code>
      <code><![CDATA[$this->options['type']]]></code>
    </PossiblyUndefinedArrayOffset>
    <PossiblyUnusedMethod>
      <code>getTranslations</code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedProperty>
      <code>$constants</code>
    </PossiblyUnusedProperty>
    <RedundantCastGivenDocblockType>
      <code>(bool) $flag</code>
    </RedundantCastGivenDocblockType>
    <RedundantConditionGivenDocblockType>
      <code>is_int($value)</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/Callback.php">
    <MixedFunctionCall>
      <code><![CDATA[call_user_func_array($this->options['callback'], $params)]]></code>
    </MixedFunctionCall>
    <MixedInferredReturnType>
      <code>array</code>
      <code>callable</code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code>new $callback()</code>
    </MixedMethodCall>
    <MixedReturnStatement>
      <code><![CDATA[$this->options['callback']]]></code>
      <code><![CDATA[$this->options['callback_params']]]></code>
    </MixedReturnStatement>
    <NonInvariantDocblockPropertyType>
      <code>$options</code>
    </NonInvariantDocblockPropertyType>
    <PossiblyInvalidArgument>
      <code>$callbackOrOptions</code>
    </PossiblyInvalidArgument>
    <PossiblyUnusedMethod>
      <code>getCallback</code>
    </PossiblyUnusedMethod>
    <RedundantCastGivenDocblockType>
      <code>(array) $params</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/Compress.php">
    <DocblockTypeContradiction>
      <code>! is_array($options)</code>
      <code>is_string($adapter)</code>
    </DocblockTypeContradiction>
    <LessSpecificImplementedReturnType>
      <code>mixed</code>
    </LessSpecificImplementedReturnType>
    <MissingPropertyType>
      <code>$adapter</code>
      <code>$adapterOptions</code>
    </MissingPropertyType>
    <MixedArgument>
      <code>$adapter</code>
      <code>$adapter</code>
      <code>$key</code>
      <code><![CDATA[$this->adapter]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code>$adapter</code>
      <code>$key</code>
      <code>$value</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>array</code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code>new $adapter($options)</code>
    </MixedMethodCall>
    <MixedReturnStatement>
      <code><![CDATA[$this->adapterOptions]]></code>
    </MixedReturnStatement>
    <MoreSpecificImplementedParamType>
      <code>$options</code>
    </MoreSpecificImplementedParamType>
    <UndefinedInterfaceMethod>
      <code>getOptions</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Compress/AbstractCompressionAlgorithm.php">
    <InvalidPropertyAssignmentValue>
      <code>[]</code>
    </InvalidPropertyAssignmentValue>
    <MixedAssignment>
      <code>$option</code>
    </MixedAssignment>
    <MixedReturnStatement>
      <code><![CDATA[$this->options[$option]]]></code>
    </MixedReturnStatement>
  </file>
  <file src="src/Compress/Bz2.php">
    <InvalidReturnStatement>
      <code>$compressed</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>string</code>
    </InvalidReturnType>
    <ParamNameMismatch>
      <code>$content</code>
      <code>$content</code>
    </ParamNameMismatch>
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$this->options['archive']]]></code>
      <code><![CDATA[$this->options['blocksize']]]></code>
    </PossiblyUndefinedArrayOffset>
    <RedundantCastGivenDocblockType>
      <code>(int) $blocksize</code>
      <code>(string) $archive</code>
    </RedundantCastGivenDocblockType>
    <RedundantConditionGivenDocblockType>
      <code>null !== $content</code>
      <code>null !== $content</code>
    </RedundantConditionGivenDocblockType>
    <UnusedFunctionCall>
      <code>bzclose</code>
      <code>bzclose</code>
      <code>bzwrite</code>
    </UnusedFunctionCall>
  </file>
  <file src="src/Compress/Gz.php">
    <InvalidReturnStatement>
      <code>$compressed</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>string</code>
    </InvalidReturnType>
    <MixedArgument>
      <code>$size</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$size</code>
    </MixedAssignment>
    <ParamNameMismatch>
      <code>$content</code>
      <code>$content</code>
    </ParamNameMismatch>
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$this->options['archive']]]></code>
      <code><![CDATA[$this->options['level']]]></code>
      <code><![CDATA[$this->options['mode']]]></code>
      <code><![CDATA[$this->options['mode']]]></code>
    </PossiblyUndefinedArrayOffset>
    <RedundantCastGivenDocblockType>
      <code>(int) $level</code>
      <code>(string) $archive</code>
    </RedundantCastGivenDocblockType>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[$mode === 'deflate' && null !== $content]]></code>
      <code>null !== $content</code>
      <code>null !== $content</code>
      <code>null !== $content</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/Compress/Lzf.php">
    <ParamNameMismatch>
      <code>$content</code>
      <code>$content</code>
    </ParamNameMismatch>
    <PossiblyUnusedParam>
      <code>$options</code>
    </PossiblyUnusedParam>
  </file>
  <file src="src/Compress/Rar.php">
    <ImplementedReturnTypeMismatch>
      <code>bool</code>
      <code>string|null</code>
    </ImplementedReturnTypeMismatch>
    <ParamNameMismatch>
      <code>$content</code>
      <code>$content</code>
    </ParamNameMismatch>
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$this->options['archive']]]></code>
      <code><![CDATA[$this->options['callback']]]></code>
      <code><![CDATA[$this->options['password']]]></code>
      <code><![CDATA[$this->options['target']]]></code>
    </PossiblyUndefinedArrayOffset>
    <RedundantCast>
      <code>(string) $target</code>
    </RedundantCast>
    <RedundantCastGivenDocblockType>
      <code>(string) $archive</code>
      <code>(string) $password</code>
    </RedundantCastGivenDocblockType>
    <TypeDoesNotContainType>
      <code>! $archive</code>
      <code>! $filelist</code>
      <code>$archive</code>
      <code>$filelist</code>
    </TypeDoesNotContainType>
    <UndefinedClass>
      <code>$filelist</code>
    </UndefinedClass>
  </file>
  <file src="src/Compress/Snappy.php">
    <MixedAssignment>
      <code>$compressed</code>
      <code>$compressed</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>string</code>
      <code>string</code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code>$compressed</code>
      <code>$compressed</code>
    </MixedReturnStatement>
    <ParamNameMismatch>
      <code>$content</code>
      <code>$content</code>
    </ParamNameMismatch>
    <PossiblyUnusedParam>
      <code>$options</code>
    </PossiblyUnusedParam>
  </file>
  <file src="src/Compress/Tar.php">
    <DocblockTypeContradiction>
      <code>$result === false</code>
    </DocblockTypeContradiction>
    <InvalidNullableReturnType>
      <code>string</code>
    </InvalidNullableReturnType>
    <MixedArgument>
      <code>$content</code>
    </MixedArgument>
    <MixedArrayAssignment>
      <code>$file[]</code>
    </MixedArrayAssignment>
    <MixedAssignment>
      <code>$content</code>
      <code>$directory</code>
      <code>$file[]</code>
      <code>$info</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>isFile</code>
    </MixedMethodCall>
    <NullableReturnStatement>
      <code><![CDATA[$this->getArchive()]]></code>
    </NullableReturnStatement>
    <ParamNameMismatch>
      <code>$content</code>
      <code>$content</code>
    </ParamNameMismatch>
    <PossiblyInvalidArgument>
      <code>$content</code>
    </PossiblyInvalidArgument>
    <PossiblyNullArgument>
      <code><![CDATA[$this->getArchive()]]></code>
    </PossiblyNullArgument>
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$this->options['target']]]></code>
    </PossiblyUndefinedArrayOffset>
    <PossiblyUndefinedVariable>
      <code>$file</code>
      <code>$file</code>
    </PossiblyUndefinedVariable>
    <RedundantCast>
      <code>(string) $target</code>
    </RedundantCast>
    <RedundantCastGivenDocblockType>
      <code>(string) $archive</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/Compress/Zip.php">
    <InvalidArgument>
      <code>$res</code>
      <code>$res</code>
      <code>$res</code>
      <code>$res</code>
      <code>$res</code>
    </InvalidArgument>
    <InvalidNullableReturnType>
      <code>string</code>
    </InvalidNullableReturnType>
    <NoValue>
      <code>$res</code>
    </NoValue>
    <NullableReturnStatement>
      <code><![CDATA[$this->options['archive']]]></code>
    </NullableReturnStatement>
    <ParamNameMismatch>
      <code>$content</code>
      <code>$content</code>
    </ParamNameMismatch>
    <PossiblyFalseOperand>
      <code>strrpos($content, DIRECTORY_SEPARATOR)</code>
      <code>strrpos($content, DIRECTORY_SEPARATOR)</code>
    </PossiblyFalseOperand>
    <PossiblyNullArgument>
      <code><![CDATA[$this->getArchive()]]></code>
    </PossiblyNullArgument>
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$this->options['archive']]]></code>
      <code><![CDATA[$this->options['archive']]]></code>
      <code><![CDATA[$this->options['target']]]></code>
    </PossiblyUndefinedArrayOffset>
    <RedundantCast>
      <code>(string) $target</code>
    </RedundantCast>
    <RedundantCastGivenDocblockType>
      <code>(string) $archive</code>
    </RedundantCastGivenDocblockType>
    <TypeDoesNotContainType>
      <code>$res !== true</code>
    </TypeDoesNotContainType>
  </file>
  <file src="src/DataUnitFormatter.php">
    <MissingReturnType>
      <code>setMode</code>
      <code>setPrecision</code>
      <code>setPrefixes</code>
      <code>setUnit</code>
    </MissingReturnType>
    <MixedArrayOffset>
      <code>$prefixes[$index]</code>
    </MixedArrayOffset>
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$this->options['mode']]]></code>
      <code><![CDATA[$this->options['precision']]]></code>
      <code><![CDATA[$this->options['prefixes']]]></code>
      <code><![CDATA[$this->options['unit']]]></code>
    </PossiblyUndefinedArrayOffset>
    <PossiblyUnusedMethod>
      <code>isDecimalMode</code>
      <code>setMode</code>
      <code>setPrecision</code>
      <code>setPrefixes</code>
      <code>setUnit</code>
    </PossiblyUnusedMethod>
    <RedundantCastGivenDocblockType>
      <code>(int) $precision</code>
      <code>(string) $unit</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/DateTimeFormatter.php">
    <MixedAssignment>
      <code>$result</code>
    </MixedAssignment>
    <PossiblyInvalidArgument>
      <code><![CDATA[$e->getCode()]]></code>
    </PossiblyInvalidArgument>
  </file>
  <file src="src/DateTimeSelect.php">
    <MixedArgumentTypeCoercion>
      <code>$value</code>
    </MixedArgumentTypeCoercion>
  </file>
  <file src="src/Decompress.php">
    <DocblockTypeContradiction>
      <code>! is_string($value)</code>
    </DocblockTypeContradiction>
    <MixedReturnStatement>
      <code>$value</code>
    </MixedReturnStatement>
    <MoreSpecificImplementedParamType>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MoreSpecificImplementedParamType>
    <PossiblyNullArgument>
      <code>$value</code>
    </PossiblyNullArgument>
  </file>
  <file src="src/Decrypt.php">
    <DeprecatedClass>
      <code>Encrypt</code>
    </DeprecatedClass>
    <DeprecatedInterface>
      <code>Decrypt</code>
    </DeprecatedInterface>
    <DocblockTypeContradiction>
      <code>is_string($value)</code>
    </DocblockTypeContradiction>
    <MixedInferredReturnType>
      <code>string</code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code>decrypt</code>
    </MixedMethodCall>
    <MixedReturnStatement>
      <code><![CDATA[$this->adapter->decrypt($value)]]></code>
      <code>$value</code>
    </MixedReturnStatement>
    <MoreSpecificImplementedParamType>
      <code>$value</code>
    </MoreSpecificImplementedParamType>
  </file>
  <file src="src/DenyList.php">
    <PossiblyUnusedMethod>
      <code>setList</code>
      <code>setStrict</code>
    </PossiblyUnusedMethod>
    <RedundantCastGivenDocblockType>
      <code>(bool) $strict</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/Encrypt.php">
    <DeprecatedInterface>
      <code>Encrypt\EncryptionAlgorithmInterface</code>
    </DeprecatedInterface>
    <DocblockTypeContradiction>
      <code>! is_string($value)</code>
    </DocblockTypeContradiction>
    <InvalidStringClass>
      <code>new $adapter($options)</code>
    </InvalidStringClass>
    <MissingPropertyType>
      <code>$adapter</code>
    </MissingPropertyType>
    <MixedArgument>
      <code>$adapter</code>
      <code>$adapter</code>
      <code>$adapter</code>
      <code>$adapter</code>
      <code>$adapter</code>
      <code>$adapter</code>
      <code><![CDATA[$this->adapter]]></code>
      <code><![CDATA[$this->adapter]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code>$adapter</code>
      <code>$adapter</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>string</code>
      <code>string</code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code>encrypt</code>
      <code>new $adapter($options)</code>
      <code>new $adapter($options)</code>
      <code>toString</code>
    </MixedMethodCall>
    <MixedReturnStatement>
      <code><![CDATA[$this->adapter->encrypt($value)]]></code>
      <code><![CDATA[$this->adapter->toString()]]></code>
      <code>$value</code>
    </MixedReturnStatement>
    <MoreSpecificImplementedParamType>
      <code>$value</code>
    </MoreSpecificImplementedParamType>
    <PossiblyUnusedMethod>
      <code>__call</code>
      <code>getAdapter</code>
      <code>getAdapterInstance</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Encrypt/BlockCipher.php">
    <DeprecatedInterface>
      <code>BlockCipher</code>
    </DeprecatedInterface>
    <DocblockTypeContradiction>
      <code>is_array($options)</code>
      <code>is_array($options)</code>
      <code><![CDATA[is_string($this->compression)]]></code>
    </DocblockTypeContradiction>
    <InvalidPropertyAssignmentValue>
      <code><![CDATA[CryptBlockCipher::factory($cipherType, $this->encryption)]]></code>
    </InvalidPropertyAssignmentValue>
    <MissingPropertyType>
      <code>$encryption</code>
      <code><![CDATA[$this->encryption]]></code>
      <code><![CDATA[$this->encryption]]></code>
      <code><![CDATA[$this->encryption]]></code>
    </MissingPropertyType>
    <MixedArgument>
      <code><![CDATA[$options['compression']]]></code>
      <code><![CDATA[$options['key']]]></code>
      <code><![CDATA[$options['vector']]]></code>
      <code><![CDATA[$this->encryption]]></code>
      <code>$value</code>
    </MixedArgument>
    <MixedArrayAccess>
      <code><![CDATA[$options['algorithm']]]></code>
      <code><![CDATA[$options['algorithm']]]></code>
      <code><![CDATA[$options['hash']]]></code>
      <code><![CDATA[$options['hash']]]></code>
      <code><![CDATA[$options['key']]]></code>
      <code><![CDATA[$options['key_iteration']]]></code>
      <code><![CDATA[$options['vector']]]></code>
      <code><![CDATA[$this->encryption['key']]]></code>
      <code><![CDATA[$this->encryption['vector']]]></code>
    </MixedArrayAccess>
    <MixedArrayAssignment>
      <code><![CDATA[$this->encryption['key']]]></code>
      <code><![CDATA[$this->encryption['key']]]></code>
      <code><![CDATA[$this->encryption['vector']]]></code>
    </MixedArrayAssignment>
    <MixedAssignment>
      <code>$options</code>
      <code>$value</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>array</code>
      <code>string</code>
      <code>string</code>
    </MixedInferredReturnType>
    <MixedOperand>
      <code><![CDATA[$this->encryption]]></code>
    </MixedOperand>
    <MixedReturnStatement>
      <code><![CDATA[$this->encryption]]></code>
      <code><![CDATA[$this->encryption['key']]]></code>
      <code><![CDATA[$this->encryption['vector']]]></code>
    </MixedReturnStatement>
    <PossiblyInvalidPropertyAssignmentValue>
      <code>$compression</code>
    </PossiblyInvalidPropertyAssignmentValue>
    <PossiblyUnusedMethod>
      <code>__construct</code>
      <code>getCompression</code>
      <code>getEncryption</code>
      <code>getKey</code>
      <code>getVector</code>
    </PossiblyUnusedMethod>
    <PropertyNotSetInConstructor>
      <code>$compression</code>
    </PropertyNotSetInConstructor>
    <UndefinedMethod>
      <code>setCipherAlgorithm</code>
      <code>setHashAlgorithm</code>
      <code>setKeyIteration</code>
      <code>setSalt</code>
    </UndefinedMethod>
  </file>
  <file src="src/Encrypt/EncryptionAlgorithmInterface.php">
    <PossiblyUnusedMethod>
      <code>decrypt</code>
      <code>encrypt</code>
      <code>toString</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Encrypt/Openssl.php">
    <DeprecatedInterface>
      <code>Openssl</code>
    </DeprecatedInterface>
    <DocblockTypeContradiction>
      <code>is_array($keys)</code>
    </DocblockTypeContradiction>
    <InvalidArgument>
      <code>array_values($keys)</code>
    </InvalidArgument>
    <MixedArgument>
      <code><![CDATA[$details['key']]]></code>
      <code><![CDATA[$details['key']]]></code>
      <code>$envKey</code>
      <code><![CDATA[$header['size']]]></code>
      <code>$length</code>
      <code>$length</code>
      <code><![CDATA[$options['compression']]]></code>
      <code><![CDATA[$options['package']]]></code>
      <code><![CDATA[$options['passphrase']]]></code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$key</code>
      <code>$key</code>
      <code>$key</code>
      <code>$options</code>
    </MixedArgumentTypeCoercion>
    <MixedArrayTypeCoercion>
      <code>$fingerprints[$key]</code>
    </MixedArrayTypeCoercion>
    <MixedAssignment>
      <code>$count</code>
      <code>$envKey</code>
      <code>$i</code>
      <code>$i</code>
      <code><![CDATA[$key['envelope']]]></code>
      <code><![CDATA[$key['private']]]></code>
      <code><![CDATA[$key['public']]]></code>
      <code>$length</code>
      <code>$option</code>
      <code>$option</code>
      <code>$option</code>
    </MixedAssignment>
    <MixedOperand>
      <code><![CDATA[$header['size']]]></code>
      <code>$i</code>
    </MixedOperand>
    <MixedPropertyTypeCoercion>
      <code><![CDATA[$this->keys]]></code>
    </MixedPropertyTypeCoercion>
    <PossiblyUnusedMethod>
      <code>__construct</code>
      <code>getCompression</code>
      <code>getPackage</code>
      <code>getPrivateKey</code>
      <code>getPublicKey</code>
      <code>setEnvelopeKey</code>
      <code>setPrivateKey</code>
      <code>setPublicKey</code>
    </PossiblyUnusedMethod>
    <RedundantCastGivenDocblockType>
      <code>(bool) $package</code>
    </RedundantCastGivenDocblockType>
    <RedundantConditionGivenDocblockType>
      <code>is_string($key)</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/File/Decrypt.php">
    <DeprecatedClass>
      <code>Filter\Decrypt</code>
      <code>Filter\Decrypt</code>
      <code>parent::filter($content)</code>
    </DeprecatedClass>
    <DocblockTypeContradiction>
      <code><![CDATA[! is_scalar($value) && ! is_array($value)]]></code>
    </DocblockTypeContradiction>
    <ImplementedReturnTypeMismatch>
      <code>string|array</code>
      <code>string|array</code>
    </ImplementedReturnTypeMismatch>
    <MixedArgument>
      <code><![CDATA[$this->filename]]></code>
      <code><![CDATA[$this->filename]]></code>
      <code><![CDATA[$this->filename]]></code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArrayAssignment>
      <code><![CDATA[$uploadData['tmp_name']]]></code>
    </MixedArrayAssignment>
    <MixedAssignment>
      <code><![CDATA[$this->filename]]></code>
      <code><![CDATA[$uploadData['tmp_name']]]></code>
      <code>$value</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>string|array</code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code><![CDATA[$this->filename]]></code>
      <code><![CDATA[$this->filename]]></code>
      <code>$uploadData</code>
      <code>$value</code>
    </MixedReturnStatement>
    <MoreSpecificImplementedParamType>
      <code>$value</code>
    </MoreSpecificImplementedParamType>
    <PossiblyNullPropertyAssignmentValue>
      <code>$filename</code>
    </PossiblyNullPropertyAssignmentValue>
    <PossiblyUndefinedVariable>
      <code>$uploadData</code>
    </PossiblyUndefinedVariable>
    <PossiblyUnusedMethod>
      <code>getFilename</code>
      <code>setFilename</code>
    </PossiblyUnusedMethod>
    <PropertyNotSetInConstructor>
      <code>$filename</code>
    </PropertyNotSetInConstructor>
    <RedundantPropertyInitializationCheck>
      <code><![CDATA[isset($this->filename)]]></code>
    </RedundantPropertyInitializationCheck>
  </file>
  <file src="src/File/Encrypt.php">
    <DeprecatedClass>
      <code>Filter\Encrypt</code>
      <code>parent::filter($content)</code>
    </DeprecatedClass>
    <DocblockTypeContradiction>
      <code><![CDATA[! is_scalar($value) && ! is_array($value)]]></code>
    </DocblockTypeContradiction>
    <ImplementedReturnTypeMismatch>
      <code>string|array</code>
    </ImplementedReturnTypeMismatch>
    <MixedArgument>
      <code><![CDATA[$this->filename]]></code>
      <code><![CDATA[$this->filename]]></code>
      <code><![CDATA[$this->filename]]></code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArrayAssignment>
      <code><![CDATA[$uploadData['tmp_name']]]></code>
    </MixedArrayAssignment>
    <MixedAssignment>
      <code><![CDATA[$this->filename]]></code>
      <code><![CDATA[$uploadData['tmp_name']]]></code>
      <code>$value</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>string|array</code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code><![CDATA[$this->filename]]></code>
      <code><![CDATA[$this->filename]]></code>
      <code>$uploadData</code>
      <code>$value</code>
    </MixedReturnStatement>
    <MoreSpecificImplementedParamType>
      <code>$value</code>
    </MoreSpecificImplementedParamType>
    <PossiblyNullPropertyAssignmentValue>
      <code>$filename</code>
    </PossiblyNullPropertyAssignmentValue>
    <PossiblyUndefinedVariable>
      <code>$uploadData</code>
    </PossiblyUndefinedVariable>
    <PossiblyUnusedMethod>
      <code>getFilename</code>
      <code>setFilename</code>
    </PossiblyUnusedMethod>
    <PropertyNotSetInConstructor>
      <code>$filename</code>
    </PropertyNotSetInConstructor>
    <RedundantPropertyInitializationCheck>
      <code><![CDATA[isset($this->filename)]]></code>
    </RedundantPropertyInitializationCheck>
  </file>
  <file src="src/File/LowerCase.php">
    <MixedAssignment>
      <code>$value</code>
    </MixedAssignment>
    <PossiblyUndefinedVariable>
      <code>$uploadData</code>
    </PossiblyUndefinedVariable>
  </file>
  <file src="src/File/Rename.php">
    <DocblockTypeContradiction>
      <code><![CDATA[! is_scalar($value) && ! is_array($value)]]></code>
      <code>is_array($options)</code>
      <code>is_array($options)</code>
    </DocblockTypeContradiction>
    <InvalidArgument>
      <code><![CDATA[$files['overwrite']]]></code>
      <code><![CDATA[$files['randomize']]]></code>
    </InvalidArgument>
    <InvalidReturnStatement>
      <code>$file</code>
      <code>$this</code>
      <code>$this</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>array</code>
    </InvalidReturnType>
    <MixedArgument>
      <code><![CDATA[$file['source']]]></code>
      <code><![CDATA[$file['source']]]></code>
      <code><![CDATA[$file['target']]]></code>
      <code><![CDATA[$file['target']]]></code>
      <code><![CDATA[$file['target']]]></code>
      <code><![CDATA[$file['target']]]></code>
      <code><![CDATA[$file['target']]]></code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$options</code>
    </MixedArgumentTypeCoercion>
    <MixedArrayAccess>
      <code><![CDATA[$file['source']]]></code>
      <code><![CDATA[$file['target']]]></code>
      <code><![CDATA[$file['target']]]></code>
      <code><![CDATA[$file['target']]]></code>
    </MixedArrayAccess>
    <MixedArrayAssignment>
      <code><![CDATA[$uploadData['tmp_name']]]></code>
    </MixedArrayAssignment>
    <MixedAssignment>
      <code><![CDATA[$uploadData['tmp_name']]]></code>
      <code>$value</code>
      <code>$value</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>string</code>
      <code>string|array</code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code><![CDATA[$file['target']]]></code>
      <code><![CDATA[$file['target']]]></code>
      <code>$uploadData</code>
      <code>$uploadData</code>
      <code>$value</code>
    </MixedReturnStatement>
    <MoreSpecificImplementedParamType>
      <code>$value</code>
    </MoreSpecificImplementedParamType>
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$rename['randomize']]]></code>
    </PossiblyUndefinedArrayOffset>
    <PossiblyUndefinedVariable>
      <code>$uploadData</code>
      <code>$uploadData</code>
    </PossiblyUndefinedVariable>
    <PropertyTypeCoercion>
      <code><![CDATA[$this->files]]></code>
    </PropertyTypeCoercion>
    <RedundantConditionGivenDocblockType>
      <code>is_string($file)</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/File/RenameUpload.php">
    <DocblockTypeContradiction>
      <code>$target === null</code>
      <code>is_string($target)</code>
    </DocblockTypeContradiction>
    <InvalidNullableReturnType>
      <code>string</code>
    </InvalidNullableReturnType>
    <InvalidPropertyAssignmentValue>
      <code><![CDATA[$this->options]]></code>
      <code><![CDATA[$this->options]]></code>
      <code><![CDATA[$this->options]]></code>
      <code><![CDATA[$this->options]]></code>
      <code><![CDATA[$this->options]]></code>
      <code><![CDATA[$this->options]]></code>
      <code><![CDATA[$this->options]]></code>
      <code><![CDATA[[
        'target'               => null,
        'use_upload_name'      => false,
        'use_upload_extension' => false,
        'overwrite'            => false,
        'randomize'            => false,
        'stream_factory'       => null,
        'upload_file_factory'  => null,
    ]]]></code>
    </InvalidPropertyAssignmentValue>
    <MixedArgument>
      <code>$clientFilename</code>
      <code>$sourceFile</code>
      <code>$sourceFile</code>
      <code>$sourceFile</code>
      <code>$sourceFile</code>
      <code>$sourceFile</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$value</code>
    </MixedArgumentTypeCoercion>
    <MixedArrayOffset>
      <code><![CDATA[$this->alreadyFiltered[$sourceFile]]]></code>
      <code><![CDATA[$this->alreadyFiltered[$sourceFile]]]></code>
      <code><![CDATA[$this->alreadyFiltered[$sourceFile]]]></code>
    </MixedArrayOffset>
    <MixedAssignment>
      <code>$clientFilename</code>
      <code>$sourceFile</code>
      <code>$sourceFile</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>UploadedFileInterface</code>
      <code><![CDATA[array<string, string>]]></code>
      <code>string</code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code><![CDATA[$this->alreadyFiltered[$alreadyFilteredKey]]]></code>
      <code><![CDATA[$this->alreadyFiltered[$fileName]]]></code>
      <code><![CDATA[$this->alreadyFiltered[$sourceFile]]]></code>
    </MixedReturnStatement>
    <MixedReturnTypeCoercion>
      <code>$fileData</code>
      <code><![CDATA[$this->alreadyFiltered[$sourceFile]]]></code>
    </MixedReturnTypeCoercion>
    <MoreSpecificImplementedParamType>
      <code>$value</code>
    </MoreSpecificImplementedParamType>
    <NullableReturnStatement>
      <code><![CDATA[$this->options['target']]]></code>
    </NullableReturnStatement>
    <PossiblyInvalidArgument>
      <code>$sourceFile</code>
      <code>$sourceFile</code>
    </PossiblyInvalidArgument>
    <PossiblyInvalidCast>
      <code>$sourceFile</code>
      <code>$sourceFile</code>
    </PossiblyInvalidCast>
    <PossiblyNullArgument>
      <code>$clientFileName</code>
      <code>$clientFileName</code>
      <code>$clientFileName</code>
    </PossiblyNullArgument>
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$this->options['overwrite']]]></code>
      <code><![CDATA[$this->options['randomize']]]></code>
      <code><![CDATA[$this->options['stream_factory']]]></code>
      <code><![CDATA[$this->options['target']]]></code>
      <code><![CDATA[$this->options['upload_file_factory']]]></code>
      <code><![CDATA[$this->options['use_upload_extension']]]></code>
      <code><![CDATA[$this->options['use_upload_name']]]></code>
    </PossiblyUndefinedArrayOffset>
    <PossiblyUnusedMethod>
      <code>setOverwrite</code>
      <code>setRandomize</code>
      <code>setUseUploadExtension</code>
      <code>setUseUploadName</code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedReturnValue>
      <code>bool</code>
    </PossiblyUnusedReturnValue>
    <RedundantCastGivenDocblockType>
      <code>(bool) $flag</code>
      <code>(bool) $flag</code>
      <code>(bool) $flag</code>
      <code>(bool) $flag</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/File/UpperCase.php">
    <DocblockTypeContradiction>
      <code><![CDATA[! is_scalar($value) && ! is_array($value)]]></code>
    </DocblockTypeContradiction>
    <MixedArgument>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$value</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>string|array</code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code>$uploadData</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedReturnStatement>
    <MoreSpecificImplementedParamType>
      <code>$value</code>
      <code>$value</code>
    </MoreSpecificImplementedParamType>
    <PossiblyUndefinedVariable>
      <code>$uploadData</code>
    </PossiblyUndefinedVariable>
  </file>
  <file src="src/FilterChain.php">
    <MixedPropertyTypeCoercion>
      <code>new PriorityQueue()</code>
    </MixedPropertyTypeCoercion>
    <MoreSpecificImplementedParamType>
      <code>$options</code>
    </MoreSpecificImplementedParamType>
    <PossiblyUnusedMethod>
      <code>plugin</code>
    </PossiblyUnusedMethod>
    <RedundantFunctionCall>
      <code>strtolower</code>
    </RedundantFunctionCall>
  </file>
  <file src="src/FilterPluginManager.php">
    <DeprecatedClass>
      <code>Blacklist::class</code>
      <code>Decrypt::class</code>
      <code>Decrypt::class</code>
      <code>Decrypt::class</code>
      <code>Decrypt::class</code>
      <code>Decrypt::class</code>
      <code>Encrypt::class</code>
      <code>Encrypt::class</code>
      <code>Encrypt::class</code>
      <code>Encrypt::class</code>
      <code>Encrypt::class</code>
      <code>File\Decrypt::class</code>
      <code>File\Decrypt::class</code>
      <code>File\Decrypt::class</code>
      <code>File\Decrypt::class</code>
      <code>File\Decrypt::class</code>
      <code>File\Decrypt::class</code>
      <code>File\Encrypt::class</code>
      <code>File\Encrypt::class</code>
      <code>File\Encrypt::class</code>
      <code>File\Encrypt::class</code>
      <code>File\Encrypt::class</code>
      <code>File\Encrypt::class</code>
      <code>Whitelist::class</code>
    </DeprecatedClass>
    <DuplicateArrayKey>
      <code><![CDATA[ToInt::class                       => InvokableFactory::class]]></code>
      <code><![CDATA[ToNull::class                      => InvokableFactory::class]]></code>
    </DuplicateArrayKey>
    <MixedInferredReturnType>
      <code>($name is class-string ? InstanceType : callable(mixed): mixed)</code>
    </MixedInferredReturnType>
    <NonInvariantDocblockPropertyType>
      <code>$factories</code>
    </NonInvariantDocblockPropertyType>
    <ParamNameMismatch>
      <code>$name</code>
    </ParamNameMismatch>
    <PossiblyUnusedMethod>
      <code>validatePlugin</code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedProperty>
      <code>$shareByDefault</code>
    </PossiblyUnusedProperty>
  </file>
  <file src="src/FilterPluginManagerFactory.php">
    <ArgumentTypeCoercion>
      <code>$options ?: []</code>
    </ArgumentTypeCoercion>
    <DeprecatedClass>
      <code><![CDATA[new Config($config['filters'])]]></code>
    </DeprecatedClass>
    <DeprecatedInterface>
      <code>FilterPluginManagerFactory</code>
    </DeprecatedInterface>
    <MissingParamType>
      <code>$name</code>
      <code>$name</code>
      <code>$requestedName</code>
    </MissingParamType>
    <MissingPropertyType>
      <code>$creationOptions</code>
    </MissingPropertyType>
    <MixedArgument>
      <code><![CDATA[$config['filters']]]></code>
      <code><![CDATA[$this->creationOptions]]></code>
    </MixedArgument>
    <ParamNameMismatch>
      <code>$container</code>
    </ParamNameMismatch>
  </file>
  <file src="src/FilterProviderInterface.php">
    <UnusedClass>
      <code>FilterProviderInterface</code>
    </UnusedClass>
  </file>
  <file src="src/HtmlEntities.php">
    <DocblockTypeContradiction>
      <code>is_array($options)</code>
    </DocblockTypeContradiction>
    <MixedArgument>
      <code><![CDATA[$options['doublequote']]]></code>
      <code><![CDATA[$options['encoding']]]></code>
      <code><![CDATA[$options['quotestyle']]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$options['encoding']]]></code>
      <code><![CDATA[$temp['charset']]]></code>
      <code><![CDATA[$temp['quotestyle']]]></code>
    </MixedAssignment>
    <PossiblyUndefinedVariable>
      <code>$temp</code>
    </PossiblyUndefinedVariable>
    <RedundantCastGivenDocblockType>
      <code>(bool) $doubleQuote</code>
      <code>(string) $value</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/Inflector.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$options['pluginManager']]]></code>
    </ArgumentTypeCoercion>
    <InvalidArgument>
      <code>array_values($processedParts)</code>
    </InvalidArgument>
    <InvalidArrayAccess>
      <code>$spec[0]</code>
    </InvalidArrayAccess>
    <InvalidArrayOffset>
      <code><![CDATA[$source[ltrim($sourceName, ':')]]]></code>
    </InvalidArrayOffset>
    <MixedArgument>
      <code><![CDATA[$options['pluginManager']]]></code>
      <code><![CDATA[$options['rules']]]></code>
      <code><![CDATA[$options['target']]]></code>
      <code><![CDATA[$options['targetReplacementIdentifier']]]></code>
      <code><![CDATA[$options['throwTargetExceptionsOn']]]></code>
      <code>$processedPart</code>
      <code>$rule</code>
      <code>$rules[$spec]</code>
      <code>$source[$ruleName]</code>
      <code>$spec</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$sourceName</code>
      <code>$spec</code>
    </MixedArgumentTypeCoercion>
    <MixedArrayAssignment>
      <code><![CDATA[$this->rules[$spec][]]]></code>
    </MixedArrayAssignment>
    <MixedAssignment>
      <code>$processedPart</code>
      <code>$processedPart</code>
      <code>$rule</code>
      <code>$ruleFilter</code>
      <code>$ruleValue</code>
      <code>$sourceValue</code>
      <code><![CDATA[$source[ltrim($sourceName, ':')]]]></code>
      <code><![CDATA[$temp['rules']]]></code>
      <code><![CDATA[$temp['target']]]></code>
      <code><![CDATA[$temp['targetReplacementIdentifier']]]></code>
      <code><![CDATA[$temp['throwTargetExceptionsOn']]]></code>
    </MixedAssignment>
    <MixedFunctionCall>
      <code>$ruleFilter($processedPart)</code>
    </MixedFunctionCall>
    <MixedInferredReturnType>
      <code>FilterInterface|false</code>
      <code>array|false</code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code><![CDATA[new $options['pluginManager']()]]></code>
    </MixedMethodCall>
    <MixedReturnStatement>
      <code><![CDATA[$this->rules[$spec]]]></code>
      <code><![CDATA[$this->rules[$spec][$index]]]></code>
    </MixedReturnStatement>
    <MixedStringOffsetAssignment>
      <code><![CDATA[$source[ltrim($sourceName, ':')]]]></code>
    </MixedStringOffsetAssignment>
    <MoreSpecificImplementedParamType>
      <code>$source</code>
    </MoreSpecificImplementedParamType>
    <ParamNameMismatch>
      <code>$source</code>
    </ParamNameMismatch>
    <PossiblyUnusedReturnValue>
      <code>self</code>
    </PossiblyUnusedReturnValue>
    <PropertyNotSetInConstructor>
      <code>$pluginManager</code>
      <code>$target</code>
    </PropertyNotSetInConstructor>
    <RedundantCast>
      <code>(string) $targetReplacementIdentifier</code>
    </RedundantCast>
    <RedundantCastGivenDocblockType>
      <code>(bool) $throwTargetExceptionsOn</code>
      <code>(string) $rule</code>
      <code>(string) $spec</code>
      <code>(string) $target</code>
      <code>(string) $value</code>
    </RedundantCastGivenDocblockType>
    <UnusedParam>
      <code>$reference</code>
      <code>$target</code>
    </UnusedParam>
  </file>
  <file src="src/Module.php">
    <MissingReturnType>
      <code>getConfig</code>
    </MissingReturnType>
    <PossiblyUnusedParam>
      <code>$moduleManager</code>
    </PossiblyUnusedParam>
    <UndefinedDocblockClass>
      <code>ModuleManager</code>
    </UndefinedDocblockClass>
    <UnusedClass>
      <code>Module</code>
    </UnusedClass>
  </file>
  <file src="src/PregReplace.php">
    <ArgumentTypeCoercion>
      <code>$pattern</code>
    </ArgumentTypeCoercion>
    <DocblockTypeContradiction>
      <code><![CDATA[! is_array($pattern) && ! is_string($pattern)]]></code>
      <code><![CDATA[! is_array($replacement) && ! is_string($replacement)]]></code>
    </DocblockTypeContradiction>
    <InvalidNullableReturnType>
      <code>bool</code>
    </InvalidNullableReturnType>
    <MixedArgument>
      <code>$args[0]</code>
      <code>$args[1]</code>
    </MixedArgument>
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$this->options['pattern']]]></code>
      <code><![CDATA[$this->options['pattern']]]></code>
      <code><![CDATA[$this->options['pattern']]]></code>
      <code><![CDATA[$this->options['replacement']]]></code>
      <code><![CDATA[$this->options['replacement']]]></code>
    </PossiblyUndefinedArrayOffset>
    <PossiblyUnusedReturnValue>
      <code>bool</code>
    </PossiblyUnusedReturnValue>
  </file>
  <file src="src/RealPath.php">
    <InvalidPropertyAssignmentValue>
      <code><![CDATA[$this->options]]></code>
      <code><![CDATA[[
        'exists' => true,
    ]]]></code>
    </InvalidPropertyAssignmentValue>
    <PossiblyInvalidArgument>
      <code>$existsOrOptions</code>
      <code>$existsOrOptions</code>
    </PossiblyInvalidArgument>
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$this->options['exists']]]></code>
      <code><![CDATA[$this->options['exists']]]></code>
    </PossiblyUndefinedArrayOffset>
    <RedundantCastGivenDocblockType>
      <code>(bool) $flag</code>
    </RedundantCastGivenDocblockType>
    <RedundantConditionGivenDocblockType>
      <code>$existsOrOptions !== null</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/StringPrefix.php">
    <DocblockTypeContradiction>
      <code>is_string($prefix)</code>
    </DocblockTypeContradiction>
  </file>
  <file src="src/StringSuffix.php">
    <DocblockTypeContradiction>
      <code>is_string($suffix)</code>
    </DocblockTypeContradiction>
  </file>
  <file src="src/StringToLower.php">
    <PossiblyInvalidArgument>
      <code>$encodingOrOptions</code>
      <code>$encodingOrOptions</code>
    </PossiblyInvalidArgument>
  </file>
  <file src="src/StringToUpper.php">
    <PossiblyInvalidArgument>
      <code>$encodingOrOptions</code>
      <code>$encodingOrOptions</code>
    </PossiblyInvalidArgument>
  </file>
  <file src="src/StringTrim.php">
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$this->options['charlist']]]></code>
      <code><![CDATA[$this->options['charlist']]]></code>
      <code><![CDATA[$this->options['charlist']]]></code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="src/StripTags.php">
    <DocblockTypeContradiction>
      <code>is_scalar($value)</code>
    </DocblockTypeContradiction>
    <MixedArgument>
      <code><![CDATA[$options['allowAttribs']]]></code>
      <code><![CDATA[$options['allowTags']]]></code>
      <code><![CDATA[$this->tagsAllowed[$tagName]]]></code>
    </MixedArgument>
    <MixedArrayAssignment>
      <code><![CDATA[$this->tagsAllowed[$tagName][$attributeName]]]></code>
    </MixedArrayAssignment>
    <MixedAssignment>
      <code>$attribute</code>
      <code>$attribute</code>
      <code>$element</code>
      <code><![CDATA[$temp['allowAttribs']]]></code>
      <code><![CDATA[$temp['allowComments']]]></code>
      <code><![CDATA[$temp['allowTags']]]></code>
    </MixedAssignment>
    <MoreSpecificImplementedParamType>
      <code>$value</code>
    </MoreSpecificImplementedParamType>
    <PossiblyUndefinedVariable>
      <code>$temp</code>
    </PossiblyUndefinedVariable>
    <RedundantCastGivenDocblockType>
      <code>(string) $value</code>
      <code>(string) $value</code>
    </RedundantCastGivenDocblockType>
    <RedundantConditionGivenDocblockType>
      <code>is_array($options)</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/ToNull.php">
    <ArgumentTypeCoercion>
      <code>$typeOrOptions</code>
    </ArgumentTypeCoercion>
    <DocblockTypeContradiction>
      <code><![CDATA[$typeOrOptions === '']]></code>
      <code><![CDATA[$typeOrOptions === '']]></code>
    </DocblockTypeContradiction>
    <MoreSpecificImplementedParamType>
      <code>$value</code>
    </MoreSpecificImplementedParamType>
    <PossiblyNullArgument>
      <code>$type</code>
    </PossiblyNullArgument>
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$this->options['type']]]></code>
    </PossiblyUndefinedArrayOffset>
    <PossiblyUnusedProperty>
      <code>$constants</code>
    </PossiblyUnusedProperty>
    <RedundantConditionGivenDocblockType>
      <code>is_int($value)</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/UpperCaseWords.php">
    <PossiblyInvalidArgument>
      <code>$encodingOrOptions</code>
      <code>$encodingOrOptions</code>
    </PossiblyInvalidArgument>
  </file>
  <file src="src/UriNormalize.php">
    <InvalidCatch>
      <code><![CDATA[try {
            $uri = UriFactory::factory($value, $defaultScheme);
            if ($this->enforcedScheme && ! $uri->getScheme()) {
                $this->enforceScheme($uri);
            }
        } catch (UriException) {
            // We are unable to parse / enforce scheme with the given config and input
            return $value;
        }]]></code>
    </InvalidCatch>
    <PossiblyNullArgument>
      <code>$defaultScheme</code>
    </PossiblyNullArgument>
    <PossiblyUnusedMethod>
      <code>setDefaultScheme</code>
      <code>setEnforcedScheme</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Whitelist.php">
    <InvalidExtendClass>
      <code>AllowList</code>
    </InvalidExtendClass>
  </file>
  <file src="src/Word/AbstractSeparator.php">
    <DocblockTypeContradiction>
      <code>is_string($separator)</code>
    </DocblockTypeContradiction>
    <MixedOperand>
      <code>$separator</code>
    </MixedOperand>
    <PossiblyInvalidArgument>
      <code>$separator</code>
    </PossiblyInvalidArgument>
    <PossiblyInvalidCast>
      <code>$separator</code>
    </PossiblyInvalidCast>
    <PossiblyUnusedMethod>
      <code>getSeparator</code>
    </PossiblyUnusedMethod>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[is_array($separator) && isset($separator['separator']) && is_string($separator['separator'])]]></code>
      <code><![CDATA[is_string($separator['separator'])]]></code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/Word/SeparatorToCamelCase.php">
    <MissingClosureParamType>
      <code>$matches</code>
      <code>$matches</code>
      <code>$matches</code>
      <code>$matches</code>
    </MissingClosureParamType>
    <MixedArgument>
      <code>$matches[1]</code>
      <code>$matches[1]</code>
      <code>$matches[2]</code>
      <code>$matches[2]</code>
    </MixedArgument>
    <MixedArrayAccess>
      <code>$matches[1]</code>
      <code>$matches[1]</code>
      <code>$matches[2]</code>
      <code>$matches[2]</code>
    </MixedArrayAccess>
  </file>
  <file src="src/Word/SeparatorToSeparator.php">
    <DocblockTypeContradiction>
      <code><![CDATA[$this->searchSeparator === null]]></code>
    </DocblockTypeContradiction>
    <MixedReturnStatement>
      <code><![CDATA[self::applyFilterOnlyToStringableValuesAndStringableArrayValues(
            $value,
            Closure::fromCallable([$this, 'filterNormalizedValue'])
        )]]></code>
    </MixedReturnStatement>
  </file>
  <file src="src/Word/Service/SeparatorToSeparatorFactory.php">
    <DeprecatedInterface>
      <code>SeparatorToSeparatorFactory</code>
    </DeprecatedInterface>
    <MissingParamType>
      <code>$creationOptions</code>
    </MissingParamType>
    <MissingReturnType>
      <code>setCreationOptions</code>
    </MissingReturnType>
    <MixedArgument>
      <code><![CDATA[$options['replacement_separator'] ?? '-']]></code>
      <code><![CDATA[$options['search_separator'] ?? ' ']]></code>
    </MixedArgument>
    <PossiblyUnusedMethod>
      <code>__construct</code>
      <code>setCreationOptions</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Word/UnderscoreToStudlyCase.php">
    <MissingClosureParamType>
      <code>$value</code>
    </MissingClosureParamType>
    <MissingClosureReturnType>
      <code>static function ($value) {</code>
    </MissingClosureReturnType>
    <MixedArgument>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedReturnStatement>
      <code>is_array($value) ? array_map($lowerCaseFirst, $value) : $lowerCaseFirst($value)</code>
    </MixedReturnStatement>
  </file>
  <file src="test/AbstractUnicodeTest.php">
    <MissingTemplateParam>
      <code>class extends AbstractUnicode {</code>
    </MissingTemplateParam>
    <PossiblyUnusedMethod>
      <code>encodingProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/AllowListTest.php">
    <InvalidArgument>
      <code>$strict</code>
    </InvalidArgument>
    <MixedArrayAccess>
      <code>$expected</code>
      <code>$value</code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code>$data</code>
      <code>[$value, $expected]</code>
    </MixedAssignment>
    <PossiblyUnusedMethod>
      <code>defaultTestProvider</code>
      <code>listTestProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/BaseNameTest.php">
    <PossiblyUnusedMethod>
      <code>returnUnfilteredDataProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/BlacklistTest.php">
    <DeprecatedClass>
      <code>new BlacklistFilter()</code>
    </DeprecatedClass>
  </file>
  <file src="test/BooleanTest.php">
    <ArgumentTypeCoercion>
      <code>$type</code>
    </ArgumentTypeCoercion>
    <MixedArgument>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArrayAccess>
      <code>$expected</code>
      <code>$expected</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code>$data</code>
      <code>$data</code>
      <code>$type</code>
      <code>[$value, $expected]</code>
      <code>[$value, $expected]</code>
    </MixedAssignment>
    <PossiblyUnusedMethod>
      <code>combinedTypeTestProvider</code>
      <code>defaultTestProvider</code>
      <code>duplicateProvider</code>
      <code>noCastingTestProvider</code>
      <code>typeTestProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/CallbackTest.php">
    <InvalidArgument>
      <code><![CDATA['param']]></code>
      <code><![CDATA['param']]></code>
    </InvalidArgument>
  </file>
  <file src="test/Compress/Bz2Test.php">
    <DocblockTypeContradiction>
      <code>assertTrue</code>
      <code>assertTrue</code>
    </DocblockTypeContradiction>
    <MissingReturnType>
      <code>testBz2DecompressNullValueIsAccepted</code>
    </MissingReturnType>
    <NullArgument>
      <code>null</code>
      <code>null</code>
    </NullArgument>
  </file>
  <file src="test/Compress/GzTest.php">
    <DocblockTypeContradiction>
      <code>assertTrue</code>
    </DocblockTypeContradiction>
    <NullArgument>
      <code>null</code>
      <code>null</code>
    </NullArgument>
  </file>
  <file src="test/Compress/LzfTest.php">
    <DeprecatedClass>
      <code>new Lzf()</code>
      <code>new Lzf()</code>
    </DeprecatedClass>
  </file>
  <file src="test/Compress/RarTest.php">
    <PossiblyUnusedReturnValue>
      <code>bool</code>
    </PossiblyUnusedReturnValue>
  </file>
  <file src="test/Compress/SnappyTest.php">
    <DeprecatedClass>
      <code>new SnappyCompression()</code>
      <code>new SnappyCompression()</code>
      <code>new SnappyCompression()</code>
      <code>new SnappyCompression()</code>
      <code>new SnappyCompression()</code>
      <code>new SnappyCompression()</code>
    </DeprecatedClass>
  </file>
  <file src="test/CompressTest.php">
    <MixedAssignment>
      <code>$compressed</code>
    </MixedAssignment>
    <PossiblyUnusedMethod>
      <code>returnUnfilteredDataProvider</code>
    </PossiblyUnusedMethod>
    <UndefinedInterfaceMethod>
      <code>getArchive</code>
      <code>getArchive</code>
    </UndefinedInterfaceMethod>
    <UnusedVariable>
      <code>$adapter</code>
    </UnusedVariable>
  </file>
  <file src="test/DataUnitFormatterTest.php">
    <PossiblyUnusedMethod>
      <code>binaryBytesTestProvider</code>
      <code>decimalBytesTestProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/DateSelectTest.php">
    <PossiblyUnusedMethod>
      <code>provideFilter</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/DateTimeFormatterTest.php">
    <PossiblyUnusedMethod>
      <code>returnUnfilteredDataProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/DateTimeSelectTest.php">
    <PossiblyUnusedMethod>
      <code>provideFilter</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/DecompressTest.php">
    <MixedArgument>
      <code>$compressed</code>
      <code>$input</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$compressed</code>
    </MixedAssignment>
    <NullArgument>
      <code>null</code>
    </NullArgument>
    <PossiblyUnusedMethod>
      <code>returnUnfilteredDataProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/DenyListTest.php">
    <MixedArrayAccess>
      <code>$expected</code>
      <code>$value</code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code>$data</code>
      <code>[$value, $expected]</code>
    </MixedAssignment>
    <PossiblyUnusedMethod>
      <code>defaultTestProvider</code>
      <code>listTestProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/DigitsTest.php">
    <PossiblyUnusedMethod>
      <code>returnUnfilteredDataProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/DirTest.php">
    <PossiblyUnusedMethod>
      <code>returnUnfilteredDataProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/File/LowerCaseTest.php">
    <MissingParamType>
      <code>$input</code>
    </MissingParamType>
    <PossiblyUnusedMethod>
      <code>returnUnfilteredDataProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/File/RenameTest.php">
    <InvalidArgument>
      <code>1234</code>
      <code>1234</code>
    </InvalidArgument>
    <PossiblyUnusedMethod>
      <code>returnUnfilteredDataProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/File/RenameUploadTest.php">
    <InvalidArgument>
      <code>1234</code>
    </InvalidArgument>
    <MixedArgument>
      <code><![CDATA[$filter($this->sourceFile)]]></code>
      <code><![CDATA[$filter($this->sourceFile)]]></code>
      <code><![CDATA[$filter($this->sourceFile)]]></code>
      <code><![CDATA[$filter($this->sourceFile)]]></code>
      <code>$firstResult</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$firstResult</code>
    </MixedAssignment>
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$oldFilePathInfo['extension']]]></code>
      <code><![CDATA[$oldFilePathInfo['extension']]]></code>
    </PossiblyUndefinedArrayOffset>
    <PossiblyUnusedMethod>
      <code>returnUnfilteredDataProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/File/UpperCaseTest.php">
    <MissingParamType>
      <code>$input</code>
    </MissingParamType>
    <PossiblyUnusedMethod>
      <code>returnUnfilteredDataProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/FilterChainTest.php">
    <PossiblyUnusedMethod>
      <code>staticUcaseFilter</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/FilterPluginManagerFactoryTest.php">
    <DeprecatedMethod>
      <code>getServiceLocator</code>
    </DeprecatedMethod>
    <MissingClosureParamType>
      <code>$container</code>
      <code>$value</code>
      <code>$value</code>
    </MissingClosureParamType>
    <MissingClosureReturnType>
      <code><![CDATA[static fn($value) => $value]]></code>
      <code><![CDATA[static fn($value) => $value]]></code>
    </MissingClosureReturnType>
    <MissingReturnType>
      <code>testFactoryConfiguresPluginManagerUnderServiceManagerV2</code>
    </MissingReturnType>
    <UnusedClosureParam>
      <code>$container</code>
    </UnusedClosureParam>
  </file>
  <file src="test/HtmlEntitiesTest.php">
    <PossiblyUnusedMethod>
      <code>returnUnfilteredDataProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/InflectorTest.php">
    <DocblockTypeContradiction>
      <code>assertNull</code>
      <code>assertSame</code>
    </DocblockTypeContradiction>
    <InvalidCast>
      <code>$rule</code>
      <code>$rule</code>
    </InvalidCast>
    <MissingParamType>
      <code>$inflector</code>
    </MissingParamType>
    <MissingReturnType>
      <code>_testOptions</code>
    </MissingReturnType>
    <MixedArgument>
      <code><![CDATA[$options['rules'][':action']]]></code>
      <code><![CDATA[$options['rules'][':controller']]]></code>
      <code><![CDATA[$rules['controller']]]></code>
      <code><![CDATA[$rules['controller']]]></code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$rule</code>
      <code>$rule</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code>$filtered</code>
      <code>$filtered</code>
      <code>$filtered</code>
      <code>$rules</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>getPluginManager</code>
      <code>getRules</code>
      <code>getTarget</code>
      <code>getTargetReplacementIdentifier</code>
      <code>isThrowTargetExceptionsOn</code>
    </MixedMethodCall>
    <MixedOperand>
      <code>$rule</code>
    </MixedOperand>
    <PossiblyFalseArgument>
      <code>$rules</code>
      <code>$rules</code>
    </PossiblyFalseArgument>
    <UnusedVariable>
      <code>$filtered</code>
      <code>$rule</code>
      <code>$target</code>
    </UnusedVariable>
  </file>
  <file src="test/MonthSelectTest.php">
    <PossiblyUnusedMethod>
      <code>provideFilter</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/PregReplaceTest.php">
    <DeprecatedMethod>
      <code>PregReplaceFilter::hasPcreUnicodeSupport()</code>
    </DeprecatedMethod>
    <PossiblyUnusedMethod>
      <code>returnNonStringScalarValues</code>
      <code>returnUnfilteredDataProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/RealPathTest.php">
    <InvalidArgument>
      <code><![CDATA[['unknown']]]></code>
    </InvalidArgument>
    <PossiblyUnusedMethod>
      <code>returnUnfilteredDataProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/StaticFilterTest.php">
    <MissingClosureParamType>
      <code>$value</code>
      <code>$value</code>
    </MissingClosureParamType>
    <MixedAssignment>
      <code>$filteredValue</code>
    </MixedAssignment>
    <UnusedClosureParam>
      <code>$value</code>
      <code>$value</code>
    </UnusedClosureParam>
  </file>
  <file src="test/StringPrefixTest.php">
    <MixedArgument>
      <code><![CDATA[$filter('sample')]]></code>
      <code>$prefix</code>
    </MixedArgument>
    <PossiblyUnusedMethod>
      <code>invalidPrefixesDataProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/StringSuffixTest.php">
    <MixedArgument>
      <code><![CDATA[$filter('sample')]]></code>
      <code>$suffix</code>
    </MixedArgument>
    <PossiblyUnusedMethod>
      <code>invalidSuffixesDataProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/StringToLowerTest.php">
    <InvalidArgument>
      <code><![CDATA[$e->getMessage()]]></code>
    </InvalidArgument>
    <PossiblyUnusedMethod>
      <code>returnUnfilteredDataProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/StringToUpperTest.php">
    <PossiblyUnusedMethod>
      <code>returnUnfilteredDataProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/StringTrimTest.php">
    <PossiblyUnusedMethod>
      <code>getNonStringValues</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/StripNewlinesTest.php">
    <PossiblyUnusedMethod>
      <code>returnNonStringScalarValues</code>
      <code>returnUnfilteredDataProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/StripTagsTest.php">
    <MixedArgument>
      <code>$filtered</code>
      <code>$input</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$filtered</code>
    </MixedAssignment>
    <PossiblyUnusedMethod>
      <code>badCommentProvider</code>
      <code>returnUnfilteredDataProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/TestAsset/Alpha.php">
    <MixedArgumentTypeCoercion>
      <code>$value</code>
    </MixedArgumentTypeCoercion>
  </file>
  <file src="test/TestAsset/CallbackClass.php">
    <PossiblyUnusedMethod>
      <code>objectCallbackWithParams</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/TestAsset/LowerCase.php">
    <MixedArgument>
      <code>$value</code>
    </MixedArgument>
  </file>
  <file src="test/TestAsset/StripUpperCase.php">
    <MixedArgument>
      <code>$value</code>
    </MixedArgument>
  </file>
  <file src="test/ToFloatTest.php">
    <PossiblyUnusedMethod>
      <code>filterableValuesProvider</code>
      <code>unfilterableValuesProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/ToIntTest.php">
    <PossiblyUnusedMethod>
      <code>returnUnfilteredDataProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/ToNullTest.php">
    <ArgumentTypeCoercion>
      <code>$type</code>
    </ArgumentTypeCoercion>
    <InvalidArgument>
      <code>true</code>
    </InvalidArgument>
    <MixedArgument>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArrayAccess>
      <code>$expected</code>
      <code>$expected</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code>$data</code>
      <code>$data</code>
      <code>$type</code>
      <code>[$value, $expected]</code>
      <code>[$value, $expected]</code>
    </MixedAssignment>
    <PossiblyUnusedMethod>
      <code>combinedTypeTestProvider</code>
      <code>defaultTestProvider</code>
      <code>duplicateTypeProvider</code>
      <code>typeTestProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/UpperCaseWordsTest.php">
    <PossiblyUnusedMethod>
      <code>returnUnfilteredDataProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/UriNormalizeTest.php">
    <PossiblyUnusedMethod>
      <code>abnormalUriProvider</code>
      <code>enforcedSchemeTestcaseProvider</code>
      <code>returnUnfilteredDataProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Word/CamelCaseToSeparatorTest.php">
    <PossiblyUnusedMethod>
      <code>returnNonStringScalarValues</code>
      <code>returnUnfilteredDataProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Word/CamelCaseToUnderscoreTest.php">
    <MixedAssignment>
      <code>$filtered</code>
      <code>$filtered</code>
    </MixedAssignment>
  </file>
  <file src="test/Word/DashToSeparatorTest.php">
    <PossiblyUnusedMethod>
      <code>returnNonStringScalarValues</code>
      <code>returnUnfilteredDataProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Word/SeparatorToCamelCaseTest.php">
    <PossiblyUnusedMethod>
      <code>returnNonStringScalarValues</code>
      <code>returnUnfilteredDataProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Word/SeparatorToSeparatorTest.php">
    <PossiblyUnusedMethod>
      <code>returnNonStringScalarValues</code>
      <code>returnUnfilteredDataProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Word/UnderscoreToCamelCaseTest.php">
    <MixedAssignment>
      <code>$filtered</code>
      <code>$filtered</code>
      <code>$filtered</code>
      <code>$filtered</code>
      <code>$filtered</code>
    </MixedAssignment>
  </file>
  <file src="test/Word/UnderscoreToStudlyCaseTest.php">
    <MixedAssignment>
      <code>$filtered</code>
      <code>$filtered</code>
      <code>$filtered</code>
      <code>$filtered</code>
      <code>$filtered</code>
      <code>$filtered</code>
    </MixedAssignment>
  </file>
</files>
